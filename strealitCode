import streamlit as st
from langchain_groq import ChatGroq
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_community.tools.tavily_search import TavilySearchResults
from fpdf import FPDF
import requests
from bs4 import BeautifulSoup
import PyPDF2
from docx import Document

# Initialize LLM and search tools
llm = ChatGroq(api_key=st.secrets.get("GROQ_API_KEY"))
search = TavilySearchResults(api_key=st.secrets.get("TAVILY_API_KEY"), max_results=2)
parser = StrOutputParser()

# Page Header
st.title("Sales Assistant Agent")
st.markdown("Assistant Agent Powered by Groq.")

# Scrape data from URL
def scrape_website(url):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.content, "html.parser")
        title = soup.title.string if soup.title else "No title"
        description = soup.find("meta", {"name": "description"})
        return {
            "title": title,
            "description": description["content"] if description else "No description available",
        }
    except Exception as e:
        return {"error": f"Error scraping website: {e}"}

# Parse uploaded document
def parse_uploaded_file(file):
    if file.type == "application/pdf":
        reader = PyPDF2.PdfReader(file)
        content = " ".join([page.extract_text() for page in reader.pages])
        return content
    elif file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        doc = Document(file)
        content = " ".join([paragraph.text for paragraph in doc.paragraphs])
        return content
    return None

# Generate insights using LLM
def generate_insights(inputs, temperature, max_tokens):
    company_data = scrape_website(inputs["company_url"])
    competitors_data = [scrape_website(url.strip()) for url in inputs["competitors"].split(",")]

    prompt = f"""
    You are a sales assistant. Based on the following details:
    - Product Name: {inputs['product_name']}
    - Product Category: {inputs['product_category']}
    - Company Data: {company_data}
    - Competitors Data: {competitors_data}
    - Value Proposition: {inputs['value_proposition']}
    - Target Customer: {inputs['target_customer']}

    Generate insights focusing on:
    1. Company Strategy
    2. Competitor Mentions
    3. Leadership Information
    Provide actionable and concise information for the sales representative.
    """

    prompt_template = ChatPromptTemplate.from_template(prompt)
    chain = prompt_template | llm | parser
    return chain.invoke({
        "company_data": company_data,
        "competitors_data": competitors_data
    })

# Generate a PDF file
def generate_pdf(content, filename="Account_Insights.pdf"):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.multi_cell(0, 10, content)
    pdf.output(filename)
    return filename

# Add sliders for temperature and max tokens
st.sidebar.title("LLM Settings")
temperature = st.sidebar.slider("Temperature", min_value=0.0, max_value=1.0, value=0.7, step=0.1)
max_tokens = st.sidebar.slider("Max Tokens", min_value=100, max_value=2000, value=500, step=100)

# Streamlit form
with st.form("company_info", clear_on_submit=True):
    product_name = st.text_input("Product Name:")
    company_url = st.text_input("Company URL:")
    product_category = st.text_input("Product Category:")
    competitors = st.text_input("Competitors (comma-separated URLs):")
    value_proposition = st.text_area("Value Proposition:")
    target_customer = st.text_input("Target Customer:")

    uploaded_file = st.file_uploader("Upload Product Overview (optional):", type=["pdf", "docx"])

    col1, col2 = st.columns(2)
    with col1:
        if st.form_submit_button("Generate Insights"):
            if product_name and company_url:
                with st.spinner("Processing..."):
                    inputs = {
                        "product_name": product_name,
                        "company_url": company_url,
                        "product_category": product_category,
                        "competitors": competitors,
                        "value_proposition": value_proposition,
                        "target_customer": target_customer,
                    }
                    if uploaded_file:
                        inputs["uploaded_file"] = parse_uploaded_file(uploaded_file)

                    try:
                        company_insights = generate_insights(inputs, temperature, max_tokens)
                        st.session_state["company_insights"] = company_insights
                    except Exception as e:
                        st.error(f"An error occurred: {e}")
            else:
                st.warning("Please provide at least a product name and company URL.")
    with col2:
        if st.form_submit_button("Reset Application"):
            st.session_state.clear()
            st.experimental_rerun()

# Display insights and download option
if "company_insights" in st.session_state:
    st.subheader("Generated Insights")
    st.markdown(st.session_state["company_insights"])

    pdf_file = generate_pdf(st.session_state["company_insights"])
    with open(pdf_file, "rb") as pdf:
        st.download_button(
            label="Download Insights as PDF",
            data=pdf,
            file_name="Account_Insights.pdf",
            mime="application/pdf",
        )
